#!/usr/bin/env python3
# ***************************************************************************
# * Authors:		Alberto García (alberto.garcia@cnb.csic.es)
# *							Martín Salinas (martin.salinas@cnb.csic.es)
# *
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307 USA
# *
# * All comments concerning this program package may be sent to the
# * e-mail address 'scipion@cnb.csic.es'
# ***************************************************************************/

# General imports
import argparse, sys, os, multiprocessing

# Installer imports
from installer.constants import MODE_ALL, MODE_COMPILE_AND_INSTALL, MODE_CONFIG, MODE_CLEAN_BIN,\
	MODE_CLEAN_ALL, MODE_CLEAN_DEPRECATED, MODE_VERSION, MODE_CHECK_CONFIG, MODE_GET_MODELS,\
	MODE_TEST, MODE_GIT, MODE_ADD_MODEL, COMMON_USAGE_HELP_MESSAGE, DEFAULT_BUILD_DIR, DEFAULT_MODELS_DIR
from installer.utils import printError, isProductionMode
from installer.config import config
from installer.parser import ModeHelpFormatter, GeneralHelpFormatter, ErrorHandlerArgumentParser
from installer.main import getSources, compileExternalSources, compileSources, install, cleanDeprecated, cleanSources
from installer.api import sendApiPost

####################### EXECUTION MODES #######################
def modeAddModel(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "addModel" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement


def modeCleanBin(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanBin" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	modeCleanBin(args)


def modeCleanAll(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanAll" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	print("WARNING: This will DELETE ALL content from src and build")
	print("         Notice that if you have unpushed changes, \n"
				"           they will be deleted.\n")
	print("Are you sure you want to do this? (YeS/No) -case sensitive-")
	yesno = input()
	if yesno == "YeS":
			cleanSources()
			modeCleanBin(args)


def modeCleanDeprecated(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanDeprecated" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	cleanDeprecated()

def modeCompileAndInstall(args: argparse.Namespace, dictConfig=None):
	"""
	### Checks the params for execution mode "compileAndInstall" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# Get sources
	getSources(branch=args.branch)
	# Compile external dependencies
	compileExternalSources(jobs=args.jobs)
	# Compile Xmipp
	compileSources(jobs=args.jobs)
	#Install
	install(directory=args.directory)

def modeConfig(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "config" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	return config()

def modeGetModels(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "getModels" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeGit(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "git" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeTest(parser: ErrorHandlerArgumentParser, args: argparse.Namespace):
	"""
	### Checks the params for execution mode "test" and then runs it.
	
	#### Params:
	- parser (ErrorHandlerArgumentParser): Parser object used to parse the arguments.
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# Check if at least either one of the two params has been used
	if not args.show and not args.testName:
		parser.error("Either a testName or \"--show\" must be used. Use \"./xmipp test -h\" for help.")
	
	# TODO: Implement

def modeVersion(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "version" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeAll(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "all" and then runs it.
	
	#### Params:
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	dictConfig = modeConfig(args)
	modeCompileAndInstall(args, dictConfig=dictConfig)
	sendApiPost(dictConfig)

def runSelectedMode(parser: ErrorHandlerArgumentParser, args: argparse.Namespace):
	"""
	### This function runs the selected execution mode.

	#### Params:
	- parser (ErrorHandlerArgumentParser): Parser object used to parse the arguments.
	- args (Namespace): Command line arguments parsed by argparse library.
	"""
	if args.mode == MODE_ADD_MODEL:
		modeAddModel(args)
	elif args.mode == MODE_ALL:
		modeAll(args)
	elif args.mode == MODE_CHECK_CONFIG:
		modeCheckConfig(args)
	elif args.mode == MODE_CLEAN_ALL:
		modeCleanAll(args)
	elif args.mode == MODE_CLEAN_BIN:
		modeCleanBin(args)
	elif args.mode == MODE_CLEAN_DEPRECATED:
		modeCleanDeprecated(args)
	elif args.mode == MODE_COMPILE_AND_INSTALL:
		modeCompileAndInstall(args)
	elif args.mode == MODE_CONFIG:
		modeConfig(args)
	elif args.mode == MODE_GET_MODELS:
		modeGetModels(args)
	elif args.mode == MODE_GIT:
		modeGit(args)
	elif args.mode == MODE_TEST:
		modeTest(parser, args)
	elif args.mode == MODE_VERSION:
		modeVersion(args)
	else:
		# If method was none of the above, exit with error
		printError(f"Mode \"{args.mode}\" not recognized. {COMMON_USAGE_HELP_MESSAGE}")

####################### MAIN EXECUTION THREAD #######################
if __name__ == "__main__":
	""" Calls main function when executed. """
	# Defining default jobs
	DEFAULT_JOBS = multiprocessing.cpu_count()

	# Creating parser to parse the command-line arguments
	parser = ErrorHandlerArgumentParser(formatter_class=GeneralHelpFormatter, prog="xmipp")

	# Adding subparsers to have other variables deppending on the value of the mode
	subparsers = parser.add_subparsers(dest="mode")

	# Arguments for mode 'addModel'
	addModelSubparser = subparsers.add_parser(MODE_ADD_MODEL, formatter_class=ModeHelpFormatter)
	addModelSubparser.add_argument("login")
	addModelSubparser.add_argument("modelPath")

	# Arguments for mode 'all'
	allSubparser = subparsers.add_parser(MODE_ALL, formatter_class=ModeHelpFormatter)
	allSubparser.add_argument("-j", "--jobs", type=int, default=DEFAULT_JOBS)
	allSubparser.add_argument("-br", "--branch")
	allSubparser.add_argument("-dir", "--directory", default=DEFAULT_BUILD_DIR)


	# Arguments for mode 'cleanAll'
	cleanAllSubparser = subparsers.add_parser(MODE_CLEAN_ALL, formatter_class=ModeHelpFormatter)

	# Arguments for mode 'cleanBin'
	cleanBinSubparser = subparsers.add_parser(MODE_CLEAN_BIN, formatter_class=ModeHelpFormatter)

	# Arguments for mode 'cleanDeprecated'
	cleanDeprecatedSubparser = subparsers.add_parser(MODE_CLEAN_DEPRECATED, formatter_class=ModeHelpFormatter)

	# Arguments for mode 'compileAndInstall'
	compileAndInstallSubparser = subparsers.add_parser(MODE_COMPILE_AND_INSTALL, formatter_class=ModeHelpFormatter)
	compileAndInstallSubparser.add_argument("-j", "--jobs", type=int, default=DEFAULT_JOBS)
	compileAndInstallSubparser.add_argument("-br", "--branch")
	compileAndInstallSubparser.add_argument("-dir", "--directory", default=DEFAULT_BUILD_DIR)

	# Arguments for mode 'config'
	configSubparser = subparsers.add_parser(MODE_CONFIG, formatter_class=ModeHelpFormatter)

	# Arguments for mode 'getModels'
	getModelsSubparser = subparsers.add_parser(MODE_GET_MODELS, formatter_class=ModeHelpFormatter)
	getModelsSubparser.add_argument("-dir", "--directory", default=DEFAULT_MODELS_DIR)

	# Arguments for mode 'git'
	gitSubparser = subparsers.add_parser(MODE_GIT, formatter_class=ModeHelpFormatter)
	gitSubparser.add_argument("command", nargs='+')

	# Arguments for mode 'test'
	testSubparser = subparsers.add_parser(MODE_TEST, formatter_class=ModeHelpFormatter)
	testSubparser.add_argument("testName", nargs='?')
	testSubparser.add_argument("-show", "--show", action='store_true')

	# Arguments for mode 'version'
	versionSubparser = subparsers.add_parser(MODE_VERSION, formatter_class=ModeHelpFormatter)
	versionSubparser.add_argument("-short", "--short", action='store_true')

	# Applying default mode value if needed
	if len(sys.argv) == 1 or (
		len(sys.argv) > 1 and 
		sys.argv[1].startswith('-') and 
		'-h' not in sys.argv and
		'--help' not in sys.argv):
		sys.argv.insert(1, MODE_ALL)

	# Parse arguments
	args = parser.parse_args()

	# Error control for number of jobs
	if hasattr(args, 'jobs') and args.jobs < 1:
		parser.error(f"Wrong job number \"{args.jobs}\". Number of jobs has to be 1 or greater.")
	
	# Error control for branch
	if hasattr(args, "branch") and args.branch is not None and len(args.branch.split(' ')) > 1:
		parser.error(f"Incorrect branchname \"{args.branch}\". Branch names can only be one word long.")

	# Running always under this own directory.
	os.chdir(os.path.dirname(os.path.abspath(__file__)))

	# Running installer in selected mode
	runSelectedMode(parser, args)

