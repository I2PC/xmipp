#!/usr/bin/env python3
# ***************************************************************************
# * Authors:		Alberto García (alberto.garcia@cnb.csic.es)
# *					Martín Salinas (martin.salinas@cnb.csic.es)
# *
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307 USA
# *
# * All comments concerning this program package may be sent to the
# * e-mail address 'scipion@cnb.csic.es'
# ***************************************************************************/

import os, subprocess, sys
from typing import Tuple

def __getProjectRootDir() -> str:
	"""
	### Returns the root directory of Xmipp.

	#### Returns:
	- (str): Absolute path to Xmipp's root directory.
	"""
	return os.path.dirname(os.path.abspath(__file__))

def __run_command(cmd: str) -> Tuple[int, str]:
	"""
	### Runs the given shell command.

	#### Params:
	- cmd (str): Command to run.

	#### Returns:
	- (int): Return code of the operation.
	- (str): Return message of the operation.
	"""
	process = subprocess.Popen(cmd, env=os.environ, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
	process.wait()
	ret_code = process.returncode
	output, err = process.communicate()
	output_str = output.decode() if not ret_code and output else err.decode()
	output_str = output_str[:-1] if output_str.endswith('\n') else output_str
	return ret_code, output_str

####################### MAIN EXECUTION THREAD #######################
if __name__ == "__main__":
	""" Calls main function when executed. """
	# Running always under this own directory.
	os.chdir(__getProjectRootDir())

	# Install installer package if it's not there already
	ret_code = __run_command("pip show xmipp3_installer")[0]
	if ret_code:
		print("Installing xmipp installer package. You should only see this message the first time you install Xmipp.", flush=True)
		ret_code, output = __run_command("pip install xmipp3-installer")
		if ret_code:
			print(output)
			print("Installation failed! See full error above.", flush=True)
			sys.exit(ret_code)
		print("Completed. Launching installer", flush=True)

	# Call xmipp installer
	process = subprocess.run(["xmipp3_installer", *sys.argv[1:]])
	sys.exit(process.returncode)
