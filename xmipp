#!/usr/bin/env python3
# ***************************************************************************
# * Authors:		Alberto García (alberto.garcia@cnb.csic.es)
# *							Martín Salinas (martin.salinas@cnb.csic.es)
# *
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307 USA
# *
# * All comments concerning this program package may be sent to the
# * e-mail address 'scipion@cnb.csic.es'
# ***************************************************************************/

# General imports
import argparse

# Installer imports
from installer.constants import DEFAULT_JOBS, MODE_ALL, MODE_COMPILE_AND_INSTALL, MODE_CONFIG,\
	MODE_CLEAN_BIN, MODE_CLEAN_ALL, MODE_CLEAN_DEPRECATED, MODE_VERSION, MODE_CHECK_CONFIG, MODE_GET_MODELS,\
	MODE_TEST, MODE_GIT, MODE_ADD_MODEL
from installer.utils import * #TODO Martin si existe en utils se va a usar no me bronquees por el *
from installer.parser import ComplexArgumentParser
from installer.config import config

####################### EXECUTION MODES #######################
def modeAddModel(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "addModel" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeCheckConfig(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "checkConfig" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeCleanBin(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanBin" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeCleanAll(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanAll" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# Clean binaries
	modeCleanBin(args)

	# Clean sources
	# TODO: Implement

def modeCleanDeprecated(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "cleanDeprecated" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeCompileAndInstall(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "compileAndInstall" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeConfig(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "config" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	config()

def modeGetModels(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "getModels" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeGit(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "git" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeTest(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "test" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeVersion(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "version" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# TODO: Implement

def modeAll(args: argparse.Namespace):
	"""
	### Checks the params for execution mode "all" and then runs it.
	
	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	# Running config
	modeConfig(args)

	# Running compilation and installation
	modeCompileAndInstall(args)

def runSelectedMode(args: argparse.Namespace):
	"""
	### This function runs the selected execution mode.

	#### Params:
	args (Namespace): Command line arguments parsed by argparse library.
	"""
	if args.mode == MODE_ADD_MODEL:
		modeAddModel(args)
	elif args.mode == MODE_ALL:
		modeAll(args)
	elif args.mode == MODE_CHECK_CONFIG:
		modeCheckConfig(args)
	elif args.mode == MODE_CLEAN_ALL:
		modeCleanAll(args)
	elif args.mode == MODE_CLEAN_BIN:
		modeCleanBin(args)
	elif args.mode == MODE_CLEAN_DEPRECATED:
		modeCleanDeprecated(args)
	elif args.mode == MODE_COMPILE_AND_INSTALL:
		modeCompileAndInstall(args)
	elif args.mode == MODE_CONFIG:
		modeConfig(args)
	elif args.mode == MODE_GET_MODELS:
		modeGetModels(args)
	elif args.mode == MODE_GIT:
		modeGit(args)
	elif args.mode == MODE_TEST:
		modeTest(args)
	elif args.mode == MODE_VERSION:
		modeVersion(args)
	else:
		# If method was none of the above, exit with error
		showError(f"Mode \"{args.mode}\" not recognized. Run -h for usage help.")

####################### MAIN EXECUTION THREAD #######################
if __name__ == "__main__":
	""" Calls main function when executed. """
	# Parse the command-line arguments
	epilog = "Example 1: ./xmipp"
	epilog += "\nExample 2: ./xmipp compileAndInstall -j 4"
	parser = ComplexArgumentParser(
		description="Run Xmipp's installer script",
		epilog=epilog,
		formatter_class=argparse.RawDescriptionHelpFormatter,
		mainParamName='mode'
	)

	# Adding params
	# Main param is execution mode. Gets options from a dictionary in constants
	parser.add_argument("mode", type=str, choices=getAllModes(), nargs='?', default="all", help="Execution mode.")
	parser.add_argument("-j", "--jobs", type=int, help=f"Number of jobs. Defaults to {DEFAULT_JOBS}. Example: -j 4.")

	# Arguments for mode 'addModel'
	condition = f"mode==\"{MODE_ADD_MODEL}\""
	parser.add_argument("login", type=str, condition=condition, help="Login (usr@server) for Nolan machine to upload the model with. Must have write permisions to such machine.")
	parser.add_argument("modelPath", type=str, condition=condition, help="Path to the model to upload to Nolan.")
	
	# Arguments for mode 'all' and 'compileAndInstall'
	condition = f"mode==\"{MODE_ALL}\" or mode==\"{MODE_COMPILE_AND_INSTALL}\""
	parser.add_argument("-br", "--branch", type=str, condition=condition, help="Branch for the source repositories.")

	# Arguments for mode 'config' and 'all'
	condition = f"mode==\"{MODE_CONFIG}\" or mode==\"{MODE_ALL}\""
	parser.add_argument("-noAsk", "--noAsk", action='store_true', condition=condition, help="If set, Xmipp will try to automatically find necessary libraries and compilers.")

	# Arguments for mode 'getModels'
	condition = f"mode==\"{MODE_GET_MODELS}\""
	defaultValue = './build/models'
	parser.add_argument("-dir", "--directory", type=str, condition=condition, default=defaultValue, help=f"Directory where the Deep Learning Models will be downloaded. Default is \"{defaultValue}\".")

	# Arguments for mode 'git'
	condition = f"mode==\"{MODE_GIT}\""
	parser.add_argument("command", type=str, condition=condition, help="Git command to run on all source repositories.")

	# Arguments for mode 'test'
	condition = f"mode==\"{MODE_TEST}\""
	parser.add_argument("-show", "--show", action='store_true', condition=condition, help="If set, shows the tests available. If combined with a test name, greps that test name within the test list.")
	parser.add_argument("testName", type=str, condition=condition, help="Test to run. If combined with --show, greps the test name from the test list.")

	# Arguments for mode 'version'
	condition = f"mode==\"{MODE_VERSION}\""
	parser.add_argument("-short", "--short", action='store_true', condition=condition, help="If set, only version number is shown.")

	# Arguments for mode 'all', 'compileAndInstall', and 'version'
	condition = f"mode==\"{MODE_ALL}\" or mode==\"{MODE_COMPILE_AND_INSTALL}\" or mode==\"{MODE_VERSION}\""
	defaultValue = './build'
	parser.add_argument("-dir", "--directory", type=str, condition=condition, default=defaultValue,  help=f"Directory where the xmipp will be installed. Default is \"{defaultValue}\".")

	# Parse arguments
	args = parser.parse_args()

	# Set the number of jobs
	args.jobs = args.jobs if args.jobs else DEFAULT_JOBS

	print("ARGS:", args)

	# Running installer in selected mode
	runSelectedMode(args)
