# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the devel branch
  push:
    branches: [ devel, master ]
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    # Disabling shallow clone is recommended for improving relevancy of reporting
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0
      - uses: actions/setup-python@v3
        with:
          python-version: '3.*' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

#       - name: Set up GCC #https://github.com/marketplace/actions/install-gcc
#         uses: egor-tensin/setup-gcc@v1
#         with:
#           version: 8
#           platform: x64
          
      - run: gcc --version
      
      # This will try to fetch cache for current commit
      # Since no such cache exists, it will try to bring newest restore-key one
      # i.e. the one from latest build. See https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
      - name: Fetch cache
        uses: actions/cache@v2.1.5
        with:
          path: sonarCache
          key: ${{ runner.os }}-sonarCache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sonarCache-
      
      - name: Prepare Sonar scanner
        run: |
          wget -nv https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.0.2311-linux.zip
          unzip -q sonar-scanner-cli-4.6.0.2311-linux.zip
          echo "${PWD}/sonar-scanner-4.6.0.2311-linux/bin/" >> $GITHUB_PATH
          wget -nv https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
          unzip -q build-wrapper-linux-x86.zip          
          echo "${PWD}/build-wrapper-linux-x86" >> $GITHUB_PATH
      
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.0.3
                
      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.0
        with: 
          cuda: 11.2.1
          method: network
          sub-packages: '["nvcc", "cufft-dev", "cudart-dev", "nvml-dev"]'

      - name: Install python dependencies
        run:  |
           python -m pip install --upgrade pip
           pip install scons numpy

      - name: Install dependencies
        run: sudo apt-get install -y libfftw3-dev libopenmpi-dev openmpi-bin libhdf5-dev python3-numpy python3-dev libtiff5-dev unzip libopencv-dev

      - name: Compile Xmipp
        run: build-wrapper-linux-x86-64 --out-dir bw-outputs ./xmipp noAsk
        env:
          CIBuild: 1
          BUILD_TESTS: True
          
      - name: SonarCloud Scan
        run: |
          sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=i2pc -Dsonar.login=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
