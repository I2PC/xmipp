name: Build Xmipp

on:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os:
        - 'ubuntu-22.04'

        cuda:
        - {version: '11.8.0', method: 'network'} 
        - {version: '12.2.2', method: 'network'} 
        - {version: 'None'}

        compiler:
        - {cc: gcc, cxx: g++}

        include:
          - os: 'ubuntu-20.04'
            cuda: {version: '11.3.1', method: 'network'}
            compiler: {cc: gcc-9, cxx: g++-9, update-alternatives: True}
          - os: 'ubuntu-20.04'
            cuda: {version: '10.2.89', method: 'local'}
            compiler: {cc: gcc-8, cxx: g++-8, update-alternatives: True}
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Extract branch name and set as environment variable
        shell: bash
        run: |
          echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfftw3-dev libopenmpi-dev libhdf5-dev libtiff5-dev libsqlite3-dev default-jdk git cmake openmpi-bin ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
          
      - if: ${{matrix.compiler.update-alternatives}}
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/${{ matrix.compiler.cc }} 128
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/${{ matrix.compiler.cxx }} 128

      - uses: actions/setup-python@main
        with:
          python-version: '3.9.15'
      - run: |
          python -m pip install --upgrade pip
          python -m pip install numpy

      - uses: Jimver/cuda-toolkit@master
        if: matrix.cuda.version != 'None'
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda.version }}
          method: ${{ matrix.cuda.method }}
          sub-packages: ${{ matrix.cuda.method=='network' && '["nvcc", "toolkit"]' || '[]' }} # Fake ternary operator
          
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: $BRANCH_NAME

      - name: Test modes
        run: |
          echo "SHORT VERSION:"
          ./xmipp version --short
          echo "LONG VERSION"
          ./xmipp version
          echo "GET CONFIG"
          ./xmipp config
          cat xmipp.conf
          echo "CLEAN BIN"
          echo "y" | ./xmipp cleanBin
          echo "CLEAN ALL"
          echo "YeS" | ./xmipp cleanAll
          ./xmipp getSources --keep-output
          ./xmipp git branch
          ./xmipp configBuild --keep-output
          ./xmipp compileAndInstall --keep-output
          echo "YeS" | ./xmipp cleanAll
          ./xmipp getSources --keep-output -b noexiste
          echo "YeS" | ./xmipp cleanAll

      - name: Compile Xmipp with all dependencies in branch $BRANCH_NAME (if such branch exists, default is devel)
        env:
          SEND_INSTALLATION_STATISTICS: 'OFF'
        run: ./xmipp all -b $BRANCH_NAME --keep-output || (cat compilation.log && false)

      - name: Cat
        run: cat xmipp.conf
