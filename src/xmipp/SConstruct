#!/usr/bin/env python

# **************************************************************************
# *
# * Authors:     I. Foche Perez (ifoche@cnb.csic.es)
# *              J. Burguet Castell (jburguet@cnb.csic.es)
# *
# * Unidad de Bioinformatica of Centro Nacional de Biotecnologia, CSIC
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'ifoche@cnb.csic.es'
# *
# **************************************************************************

# Builders and pseudobuilders used be SConscript to install things.


import os
import sys
import shutil
from os.path import join

import SCons.Node
from SCons.Builder import Builder
from SCons.Script.Main import AddOption

try:
 from itertools import izip
except:
    izip = zip
from glob import glob
import fnmatch
import platform
import SCons.SConf
try:
    from ConfigParser import ConfigParser, ParsingError
except ImportError:
    from configparser import ConfigParser, ParsingError  # Python 3
    
MACOSX = (platform.system() == 'Darwin')
WINDOWS = (platform.system() == 'Windows')
LINUX = (platform.system() == 'Linux')

# Define our builders
if LINUX:
    download = Builder(action='wget -nv -c -O $TARGET $SOURCE')
    untar = Builder(action='tar -C $cdir --recursive-unlink -xzf $SOURCE')
elif MACOSX:
    download = Builder(action='curl -L "$SOURCE" -o "$TARGET"')
    untar = Builder(action='tar -C $cdir -xzf $SOURCE')
else:
    print('OS not tested yet')
    sys.exit(1)


# Create the environment the whole build will use.
env = Environment(ENV=os.environ,
                  BUILDERS=Environment()['BUILDERS'],
                  tools=['Make', 'AutoConfig'],
                  toolpath=[join('install', 'scons-tools')])
# TODO: BUILDERS var added from the tricky creation of a new environment.
# If not, they lose default builders like "Program", which are needed later
# (by CheckLib and so on). See http://www.scons.org/doc/2.0.1/HTML/scons-user/x3516.html
# See how to change it into a cleaner way (not doing BUILDERS=Environment()['BUILDERS']!)

AddOption('--verbose', dest='verbose', action='store_true',
          help='Show full message of compilation lines')
# Message from autoconf and make, so we don't see all its verbosity.
if not GetOption('verbose'):
    env['AUTOCONFIGCOMSTR'] = "Configuring $TARGET from $SOURCES"
    env['MAKECOMSTR'] = "Compiling & installing $TARGET from $SOURCES "

    
def targetInBuild(env, targetName):
    return targetName in map(str, BUILD_TARGETS)


# Add the path to dynamic libraries so the linker can find them.

if LINUX:
    env.AppendUnique(LIBPATH=os.environ.get('LD_LIBRARY_PATH', ''))
elif MACOSX:
    env.AppendUnique(LIBPATH=os.environ.get('DYLD_FALLBACK_LIBRARY_PATH', ''))
elif WINDOWS:
    print("OS not tested yet")
    Exit(1)
else:
    print("Unknown system: %s\nPlease tell the developers." % platform.system())


# Python and SCons versions are fixed
# env.EnsurePythonVersion(2,7)
env.EnsureSConsVersion(2,3,0)
# TODO: see after all is clean and crispy if we can avoid fixing the versions.
# We can specify a range of valid version after we check it works with them.


#  ************************************************************************
#  *                                                                      *
#  *                       Auxiliar functions                             *
#  *                                                                      *
#  ************************************************************************


def appendUnique(elist, element):
    'Add element to a list only if it doesnt previously exist'
    if element not in elist:
        if not isinstance(element, str):
            elist.extend(element)
        else:
            elist.append(element)


#  ************************************************************************
#  *                                                                      *
#  *                            Extra options                             *
#  *                                                                      *
#  ************************************************************************
cf = ConfigParser()
cf.optionxform = str  # keep case (stackoverflow.com/questions/1611799)
try:
    if not os.path.exists("install/xmipp.conf"):
        shutil.copy("install/xmipp.template", "install/xmipp.conf")
    cf.read("install/xmipp.conf")        
except ParsingError:
    sys.exit("%s\nPlease fix the configuration file install/xmipp.conf." % sys.exc_info()[1])
if not 'BUILD' in cf.sections():
    print("Cannot find section BUILD in install/xmipp.conf")
os.environ.update(dict(cf.items('BUILD')))

env['CPPPATH'] = os.environ.get('CPPPATH', [])
env['CC'] = os.environ.get('CC')
env['CXX'] = os.environ.get('CXX')
env['LINKERFORPROGRAMS'] = os.environ.get('LINKERFORPROGRAMS')
env['CCFLAGS'] = os.environ.get('CCFLAGS', '').split()
cxxFlags = os.environ.get('CXXFLAGS', '')
env['CXXFLAGS'] = cxxFlags.split()
os.environ['CXXFLAGS'] = cxxFlags # FIXME use only env or os.environ in the rest of the code
env['LINKFLAGS'] = os.environ.get('LINKFLAGS', '').split()


env['XMIPP_BUNDLE'] = os.environ.get('XMIPP_BUNDLE')
env['MPI_CC'] = os.environ.get('MPI_CC')
env['MPI_CXX'] = os.environ.get('MPI_CXX')
env['MPI_LINKERFORPROGRAMS'] = os.environ.get('MPI_LINKERFORPROGRAMS')
env['MPI_CXXFLAGS'] = os.environ.get('MPI_CXXFLAGS').split()
env['MPI_LINKFLAGS'] = os.environ['MPI_LINKFLAGS'].split()
env['MATLAB_DIR'] = os.environ.get('MATLAB_DIR')
env['CUDA'] = os.environ.get('CUDA')
env['NVCC'] = os.environ.get('NVCC')
env['NVCC_CXXFLAGS'] = os.environ.get('NVCC_CXXFLAGS').split()
env['NVCC_LINKFLAGS'] = os.environ.get('NVCC_LINKFLAGS').split()

xmippPath = Dir('.').abspath
env['PACKAGE'] = {'NAME': 'xmipp',
                  'SCONSCRIPT': xmippPath
                 }


#  ************************************************************************
#  *                                                                      *
#  *                           Pseudobuilders                             *
#  *                                                                      *
#  ************************************************************************

def remove_prefix(text, prefix):
    return text[text.startswith(prefix) and len(prefix):]

env['INCDIRFLAGS'] = os.environ.get('INCDIRFLAGS', '').split()
env['LIBDIRFLAGS'] = os.environ.get('LIBDIRFLAGS', '').split()

if len(env["INCDIRFLAGS"])>0:
    external_incdirs = [remove_prefix(os.path.expandvars(x),"-I") for x in env["INCDIRFLAGS"]]
else:
    external_incdirs = []

if len(env["LIBDIRFLAGS"])>0:
    external_libdirs = [remove_prefix(os.path.expandvars(x),"-L") for x in env["LIBDIRFLAGS"]]
else:
    external_libdirs = []    

env['EXTERNAL_INCDIRS'] = external_incdirs
env['EXTERNAL_LIBDIRS'] = external_libdirs

def addCppLibrary(env, name, dirs=[], tars=[], untarTargets=['configure'], patterns=[], incs=[], 
                      libs=[], prefix=None, suffix=None, installDir=None, libpath=['lib'], deps=[], 
                      mpi=False, nvcc=False, default=True, target=None):
    """Add self-made and compiled shared library to the compilation process
    
    This pseudobuilder access given directory, compiles it
    and installs it. It also tells SCons about it dependencies.

    If default=False, the library will not be built unless the option
    --with-<name> is used.

    Returns the final targets, the ones that Make will create.
    """
    _libs = list(libs)
    _libpath = list(libpath)+external_libdirs
    if name == "XmippInterfaceCuda":
        _libs.append("XmippCuda")
    if "Cuda" in name:
        _libs.append("cudart")
        #_libs.append("cuda")
        _libs.append("cufft")
        _libs.append("nvidia-ml")
        _libs.append("cuFFTAdvisor")
    _incs = list(incs)#+external_incdirs
    lastTarget = deps
    prefix = 'lib' if prefix is None else prefix
    suffix = '.so' if suffix is None else suffix
    
    basedir = 'lib'
    targetName = join(basedir, target if target else prefix + name)
    sources = []

    for d, p in izip(dirs, patterns):
        sources += glob(join(env['PACKAGE']['SCONSCRIPT'], d, p))
        
    if not sources and env.TargetInBuild(name):
        Exit('No sources found for Library: %s. Exiting!!!' % name)
    sources.sort() # XXX HACK this is to have a fixed order of the files we compile
    # the reason is a compilation error for CUDA, which results in a multiple symbol detection
    # when the order is different. This has to be fixed in the future by changing the CUDA
    # build system FIXME David Strelak
    env2 = Environment()
    env2['ENV']['PATH'] = env['ENV']['PATH']
    env2['CXXFLAGS']=list(env['CXXFLAGS']) # list(.) causes a true copy and not just a pointer 
    env2['LINKFLAGS']=list(env['LINKFLAGS'])
    env2['CXX'] = env['CXX']
    if "Cuda" in name or nvcc:
        env2['LINKFLAGS']+=env['NVCC_LINKFLAGS']

    extraArgs = {}
    if mpi:
        if not 'CXXFLAGS' in env2:
            env2['CXXFLAGS']=[]
        if not 'LINKFLAGS' in env2:
            env2['LINKFLAGS']=[]
        env2['CXXFLAGS']+=env['MPI_CXXFLAGS']
        env2['LINKFLAGS']+=env['MPI_LINKFLAGS']
        extraArgs = {'CC': env['MPI_CC'], 'CXX': env['MPI_CXX'], 'LINK': env['MPI_LINKERFORPROGRAMS']}
    if nvcc:
        if not 'CXXFLAGS' in env2:
            env2['CXXFLAGS']=[]
        if not 'LINKFLAGS' in env2:
            env2['LINKFLAGS']=[]
        env2['CXXFLAGS'] = env['NVCC_CXXFLAGS']
        _libs.append(['cudart', 'cublas', 'cufft', 'curand', 'cusparse', 'nvToolsExt', 'nvidia-ml','cuFFTAdvisor'])
        extraArgs = {'CC': env['NVCC'], 'CXX': env['NVCC'], 'LINK': env['LINKERFORPROGRAMS']}

    _incs.append(env['CPPPATH'])


    libraryArgs = {
        'target':      targetName,
        'source':      sources,
        'CPPPATH':     _incs,
        'LIBPATH':     _libpath,
        'LIBS':        _libs,
        'SHLIBPREFIX': prefix,
        'SHLIBSUFFIX': suffix,
        'CXXFLAGS':    env2['CXXFLAGS']+env['INCDIRFLAGS'],
        'LINKFLAGS':   env2['LINKFLAGS']+env['LIBDIRFLAGS']
    }
    libraryArgs.update(extraArgs)
    if nvcc:
        library=env2.Library(**libraryArgs)
    else:
        library = env2.SharedLibrary(**libraryArgs)
    env2.Depends(library, sources)
    
    if installDir:
        install = env2.Install(installDir, library)
        SideEffect('dummy', install)
        lastTarget = install
    else:
        lastTarget = library
    env2.Default(lastTarget)

    for dep in deps:
        env2.Depends(sources, dep)

    env2.Alias(name, lastTarget)

    return lastTarget


def symLink(env, target, source):
    #As the link will be in bin/ directory we need to move up
    sources = source
    current = Dir('.').path+'/'
    import SCons
    if isinstance(target, SCons. Node.NodeList) or isinstance(target, list):
        link = target[0].path
    else:
        link = target
    if isinstance(link, str) and link.startswith(current):
        link = link.split(current)[1]
    if isinstance(sources, SCons.Node.NodeList) or isinstance(sources, list):
        sources = source[0].path
    if isinstance(sources, str) and sources.startswith(current):
        sources = sources.split(current)[1]

    sources = os.path.relpath(sources, os.path.split(link)[0])
    #if os.path.lexists(link):
    #    os.remove(link)
    #print 'Linking to %s from %s' % (sources, link)
    #os.symlink(sources, link)
    result = env.Command(Entry(link),
                         Entry(source),
                         Action('rm -rf %s && ln -v -s %s %s' % (Entry(link).abspath, sources, 
                                                                 Entry(link).abspath),
                                'Creating a link from %s to %s' % (link, sources)))
    env.Default(result)
    return result


def Cmd(cmd):
    print(cmd)
    os.system(cmd)


def AddMatchingFiles(params, directory, files):
    """ Callback, adds all matching files in dir
        params[0] = pattern
        params[1] = blacklist
        params[0] = sources
    """
    for filename in fnmatch.filter(files, params[0]):
        if filename not in params[1]:
            params[2].append(join(directory, filename))

    
def Glob(path, pattern, blacklist=[]):
    """ Custom made globbing, walking into all subdirectories from path. """
    sources = []
    for root, dirs, files in os.walk(path):
        for file in fnmatch.filter(files, pattern):
            if file not in blacklist:
                sources.append(join(root, file))
    return sources


def CreateFileList(path, pattern, filename, root='', root2=''):
    fOut = open(filename, 'w+')
    files = [f.replace(root, root2) + '\n' for f in Glob(path, pattern, [])]
    fOut.writelines(files)
    fOut.close()
    

def addProgram(env, name, src=None, pattern=None, installDir=None, 
               libPaths=[], incs=[], libs=[], cxxflags=[], linkflags=[], 
               deps=[], mpi=False, cuda=False, nvcc=False, default=True):
    """Add, compile and install a program to the compilation process
    
    This pseudobuilder compiles a C++ program using CXX compiler and linker.
    
    This is designed to compile the different parts of a EM software

    If default=False, the program will not be compiled unless the 
    --with-<program-name> is used.

    Returns the final targets, the ones that Command returns.
    
    """
    if not default and not GetOption(name):
        AddOption('--with-%s' % name, dest=name, action='store_true',
                  help='Add the program %s to the compilation' % name)
        return ''
    src = src or ['src']
    pattern = pattern or ['*.cpp']
    installDir = installDir or 'bin'
    libs = libs or []
    libPathsCopy = libPaths + [Dir('lib').abspath]
    incsCopy = list(incs) or []
    if cuda or nvcc:
        libs += ['cuFFTAdvisor', 'cudart', 'cublas', 'cufft', 'curand', 'cusparse', 'nvToolsExt','nvidia-ml', 'pthread']

    sources = []
    for s, p in izip(src, pattern):
         if os.path.isdir(s):
             sources += glob(join(s, p))
         else:
             sources += [s]

    cxxflagsCopy = list(cxxflags)+env['CXXFLAGS']
    linkflagsCopy = list(linkflags)
    if mpi: 
        ccCopy = str(env['MPI_CC'])
        cxxCopy = str(env['MPI_CXX'])
        linkCopy = env['MPI_LINKERFORPROGRAMS']
        cxxflagsCopy += env['MPI_CXXFLAGS']
        linkflagsCopy += env['MPI_LINKFLAGS']
    elif nvcc:
        ccCopy = str(env['NVCC'])
        cxxCopy = str(env['NVCC'])
        linkCopy = env['NVCC']
        cxxflagsCopy += env['NVCC_CXXFLAGS']
        linkflagsCopy += env['NVCC_LINKFLAGS']
    else:
        ccCopy = str(env['CC'])
        cxxCopy = str(env['CXX'])
        linkCopy = env['LINKERFORPROGRAMS']
        linkflagsCopy += env['LINKFLAGS']

    if cuda:
        linkflagsCopy += env['NVCC_LINKFLAGS']

    incsCopy += env['CPPPATH']+external_incdirs
    libsCopy = libs
    ldLibraryPathCopy = [env['LIBPATH']]
    appendUnique(libPathsCopy, external_libdirs) # This order is important, because if we should use Scipion libs, these will be before the system libs
    appendUnique(libPathsCopy, env.get('LIBPATH', '').split(os.pathsep))
    env2 = Environment()
    env2['ENV']['LD_LIBRARY_PATH'] = env['ENV'].get('LD_LIBRARY_PATH', '')
    env2['ENV']['PATH'] = env['ENV']['PATH']

    program = env2.Program(
                          File(join(installDir, name)).abspath,
                          source=sources,
                          CC=ccCopy,
                          CXX=cxxCopy,
                          CPPPATH=incsCopy,
                          LIBPATH=libPathsCopy,
                          LIBS=libsCopy,
                          CXXFLAGS=cxxflagsCopy,
                          LINKFLAGS=linkflagsCopy,
                          LINK=linkCopy,
                          LD_LIBRARY_PATH=ldLibraryPathCopy
                          )
    env2.Default(program)
    
    env2.Depends(program, deps)
    
    return program


def compilerConfig(env):
    """Check the good state of the C and C++ compilers and return the proper env."""

    conf = Configure(env)
    # ---- check for environment variables
    if 'CC' in os.environ:
        conf.env.Replace(CC=os.environ['CC'])
    else:
        conf.env.Replace(CC='gcc')
    print(">> Using C compiler: " + conf.env.get('CC'))

    if 'CFLAGS' in os.environ:
        conf.env.Replace(CFLAGS=os.environ['CFLAGS'])
        print(">> Using custom C build flags")

    if 'CXX' in os.environ:
        conf.env.Replace(CXX=os.environ['CXX'])
    else:
        conf.env.Replace(CXX='g++')
    print(">> Using C++ compiler: " + conf.env.get('CXX'))

    if 'CXXFLAGS' in os.environ:
        conf.env.Append(CPPFLAGS=os.environ['CXXFLAGS'])
        print(">> Appending custom C++ build flags : " + os.environ['CXXFLAGS'])

    if 'LDFLAGS' in os.environ:
        conf.env.Append(LINKFLAGS=os.environ['LDFLAGS'])
        print(">> Appending custom link flags : " + os.environ['LDFLAGS'])

    conf.CheckCC()
    conf.CheckCXX()
    env = conf.Finish()
    return env


def libraryTest(env, name, lang='c'):
    """Check the existence of a concrete C/C++ library."""
    env2 = Environment(LIBS=env.get('LIBS',''))
    conf = Configure(env2)
    conf.CheckLib(name, language=lang)
    env2 = conf.Finish()
    # conf.Finish() returns the environment it used, and we may want to use it,
    # like:  return conf.Finish()  but we don't do that so we keep our env clean :)

# Add methods so SConscript can call them.
env.AddMethod(untar, 'Untar')
env.AddMethod(compilerConfig, 'CompilerConfig')
env.AddMethod(addCppLibrary, 'AddCppLibrary')
env.AddMethod(symLink, 'SymLink')
env.AddMethod(addProgram, 'AddProgram')
env.AddMethod(targetInBuild, 'TargetInBuild')

# Run SConscript
env.SConscript('SConscript', exports='env')

# Add original help (the one that we would have if we didn't use
# Help() before). But remove the "usage:" part (first line).
phelp = SCons.Script.Main.OptionsParser.format_help().split('\n')
Help('\n'.join(phelp[1:]))
# This is kind of a hack, because the #@!^ scons doesn't give you easy
# access to the original help message.
