"""
/***************************************************************************
 *
 * Authors:    Federico P. de Isidro Gomez			  fp.deisidro@cnb.csic.es
 *
 * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307  USA
 *
 *  All comments concerning this program package may be sent to the
 *  e-mail address 'xmipp@cnb.csic.es'
 ***************************************************************************/
"""


from cmath import sqrt
from select import select
from statistics import variance
from time import sleep
from xmipp_base import *

from pwem.emlib import metadata as md
import xmippLib
  
from statsmodels.tsa.stattools import adfuller
from scipy import stats
import numpy as np


class ScriptTomoResidualStatistics(XmippScript):

  def __init__(self):
    XmippScript.__init__(self)

    self.p = 0.5
    self.residSize = {}
    self.residX = {}
    self.residY = {}
    self.residXAcc = {}
    self.residYAcc = {}
    self.moduleAcc = {}
    self.nPosX = {}
    self.nPosY = {}

  def defineParams(self):
    """
      Define program parameters
    """

    self.addUsageLine('Perform statistical test on a dataset of residual vectors comming from landmark \
      to check for possible patterns, correlations or some other non-random behaviour. ')

    ## params
    self.addParamsLine(' -i <inputMetadaFile>   : coordinate model metadata file path. This file contains the coordinate in slice, \
      its assigned coordinate 3d and the residual vector between the first and the proyection of the second. This is generated by the \
        xmipp_tomo_detect_misalignment_trajectory program.\n')


  def readResidInfo(self):
    """
      Read residual information from metadata
    """
    mdFilePath = self.getParam('-i')

    mData = md.Metadata(mdFilePath)

    for objId in mData:
      id = mData.getValue(md.MDL_FRAME_ID, objId)

      if id in self.residX.keys():
        self.residX[id].append(mData.getValue(md.MDL_SHIFT_X, objId))
        self.residY[id].append(mData.getValue(md.MDL_SHIFT_Y, objId))

      else:
        self.residX[id] = [mData.getValue(md.MDL_SHIFT_X, objId)]
        self.residY[id] = [mData.getValue(md.MDL_SHIFT_Y, objId)]


  def generateSideInfo(self):
    """
      Generate residual side information to perform posterior tests
    """
    
    for key in self.residX.keys():
      # Residual info vectors
      self.residSize[key] = len(self.residX[key])

      nPosX = 0
      nPosY = 0

      for i, r in enumerate(self.residX[key]):
        if r > 0:
          nPosX += 1

        if i == 0:
          self.residXAcc[key] = [r]
        else:
          self.residXAcc[key].append(r+self.residXAcc[key][i-1])

      for i, r in enumerate(self.residY[key]):
        if r > 0:
          nPosY += 1

        if i == 0:
          self.residYAcc[key] = [r]
        else:
          self.residYAcc[key].append(r+self.residYAcc[key][i-1])

      self.nPosX[key] = nPosX
      self.nPosY[key] = nPosY

      for i in range(self.residSize[key]):
        if i == 0:
          self.moduleAcc[key] = [sqrt(self.residXAcc[key][i]*self.residXAcc[key][i] + self.residYAcc[key][i]*self.residYAcc[key][i])]
        else:
          self.moduleAcc[key].append(sqrt(self.residXAcc[key][i]*self.residXAcc[key][i] + self.residYAcc[key][i]*self.residYAcc[key][i]))


  def binomialTest(self, nPos, rs):
    """
      Binomial test for sign distribution
    """

    stats.binom_test(nPos, rs , self.p)


  def fTestVar(self, fStatistic, rs):
    """
      F-test of equality of variances
    """

    stats.f.cdf(fStatistic, rs-1, rs-1)

  
  def augmentedDickeyFullerTest(self, modAcc):
    """
      Augmented Dickey-Fuller test for random walk
    """

    adfuller(modAcc)


  def run(self):
    self.readResidInfo()
    self.generateSideInfo()

    for key in self.residX():
      rs = self.residSize[key]

      self.binomialTest(self.nPosX[key], rs)
      self.binomialTest(self.nPosY[key], rs)


      # Variance distribution matrix
      # sumRadius = 0
      varianceMatrix = np.empty([2, 2])

      for i, rx in enumerate(self.residX[key]):
        ry = self.residY[key][i]

        rx2 = rx * rx
        ry2 = ry * ry
        rxy = rx * ry

        # sumRadius += sqrt(rx2+ry2)
        varianceMatrix += np.matrix([rx2, rxy], [rxy, ry2])

      [lambda1, lambda2], _ = np.linalg.eig(self.varianceMatrix)

      self.fTestVar(lambda1/lambda2, rs)

      self.augmentedDickeyFullerTest(self.moduleAcc[key])



