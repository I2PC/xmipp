"""
/***************************************************************************
 *
 * Authors:    Federico P. de Isidro Gomez			  fp.deisidro@cnb.csic.es
 *
 * Unidad de  Bioinformatica of Centro Nacional de Biotecnologia , CSIC
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307  USA
 *
 *  All comments concerning this program package may be sent to the
 *  e-mail address 'xmipp@cnb.csic.es'
 ***************************************************************************/
"""


from cmath import sqrt
from xmipp_base import *

from pwem.emlib import metadata as md
import xmippLib
  
from statsmodels.tsa.stattools import adfuller
from scipy import stats


class ScriptDeepDenoising(XmippScript):

  def __init__(self):
    XmippScript.__init__(self)

    self.p = 0.5
    self.residSize
    self.residX = []
    self.residY = []
    self.residXAcc = []
    self.residYAcc = []
    self.moduleAcc = []
    self.nPosX = 0
    self.nPosY = 0


  def defineParams(self):
    """
      Define program parameters
    """

    self.addUsageLine('Perform statistical test on a dataset of residual vectors comming from landmark \
      to check for possible patterns, correlations or some other non-random behaviour. ')

    ## params
    self.addParamsLine(' -i <inputMetadaFile>   : coordinate model metadata file path. This file contains the coordinate in slice, \
      its assigned coordinate 3d and the residual vector between the first and the proyection of the second. This is generated by the \
        xmipp_tomo_detect_misalignment_trajectory program.\n')


  def readResidInfo(self):
    """
      Read residual information from metadata
    """
    mdFilePath = self.getParam('-i')

    mData = md.Metadata(mdFilePath)

    for objId in mData:
      self.residX.append(mData.getValue(md.MDL_SHIFT_X, objId))
      self.residY.append(mData.getValue(md.MDL_SHIFT_Y, objId))


  def generateSideInfo(self):
    """
      Generate residual side information to perform posterior tests
    """

    self.residSize = len(self.residX)

    for i, r in enumerate(self.residX):
      if r > 0:
        self.nPosX += 1

      if i == 0:
        self.residXAcc.append(r)
      else:
        self.residXAcc.append(r+self.residXAcc[i-1])

    for i, r in enumerate(self.residX):
      if r > 0:
        self.nPosY += 1

      if i == 0:
        self.residYAcc.append(r)
      else:
        self.residYAcc.append(r+self.residYAcc[i-1])

    for i in range(self.residSize):
      self.moduleAcc.append(sqrt(self.residXAcc[i]*self.residXAcc[i] + self.residYAcc[i]*self.residYAcc[i]))
  

  def binomialTest(self, nPos):
    """
      Binomial test for sign distribution
    """

    stats.binom_test(nPos, self.residSize , self.p)

  
  def signSequenceTest(self):
    """
      Test for sign sequence randomness
    """

    pass


  def augmentedDickeyFullerTest(self):
    """
      Augmented Dickey-Fuller test for random walk
    """

    adfuller(self.moduleAcc)

